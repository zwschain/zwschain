// Code generated by MockGen. DO NOT EDIT.
// Source: ./contracts/shim/interfaces_stable.go

// Package shim is a generated GoMock package.
package shim

import (
	gomock "github.com/golang/mock/gomock"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	common "github.com/palletone/go-palletone/common"
	peer "github.com/palletone/go-palletone/core/vmContractPub/protos/peer"
	modules "github.com/palletone/go-palletone/dag/modules"
	reflect "reflect"
)

// MockChaincode is a mock of Chaincode interface
type MockChaincode struct {
	ctrl     *gomock.Controller
	recorder *MockChaincodeMockRecorder
}

// MockChaincodeMockRecorder is the mock recorder for MockChaincode
type MockChaincodeMockRecorder struct {
	mock *MockChaincode
}

// NewMockChaincode creates a new mock instance
func NewMockChaincode(ctrl *gomock.Controller) *MockChaincode {
	mock := &MockChaincode{ctrl: ctrl}
	mock.recorder = &MockChaincodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChaincode) EXPECT() *MockChaincodeMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockChaincode) Init(stub ChaincodeStubInterface) peer.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", stub)
	ret0, _ := ret[0].(peer.Response)
	return ret0
}

// Init indicates an expected call of Init
func (mr *MockChaincodeMockRecorder) Init(stub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockChaincode)(nil).Init), stub)
}

// Invoke mocks base method
func (m *MockChaincode) Invoke(stub ChaincodeStubInterface) peer.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", stub)
	ret0, _ := ret[0].(peer.Response)
	return ret0
}

// Invoke indicates an expected call of Invoke
func (mr *MockChaincodeMockRecorder) Invoke(stub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockChaincode)(nil).Invoke), stub)
}

// MockChaincodeStubInterface is a mock of ChaincodeStubInterface interface
type MockChaincodeStubInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChaincodeStubInterfaceMockRecorder
}

// MockChaincodeStubInterfaceMockRecorder is the mock recorder for MockChaincodeStubInterface
type MockChaincodeStubInterfaceMockRecorder struct {
	mock *MockChaincodeStubInterface
}

// NewMockChaincodeStubInterface creates a new mock instance
func NewMockChaincodeStubInterface(ctrl *gomock.Controller) *MockChaincodeStubInterface {
	mock := &MockChaincodeStubInterface{ctrl: ctrl}
	mock.recorder = &MockChaincodeStubInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChaincodeStubInterface) EXPECT() *MockChaincodeStubInterfaceMockRecorder {
	return m.recorder
}

// GetArgs mocks base method
func (m *MockChaincodeStubInterface) GetArgs() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgs")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetArgs indicates an expected call of GetArgs
func (mr *MockChaincodeStubInterfaceMockRecorder) GetArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgs", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetArgs))
}

// GetStringArgs mocks base method
func (m *MockChaincodeStubInterface) GetStringArgs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringArgs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetStringArgs indicates an expected call of GetStringArgs
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStringArgs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringArgs", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStringArgs))
}

// GetFunctionAndParameters mocks base method
func (m *MockChaincodeStubInterface) GetFunctionAndParameters() (string, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFunctionAndParameters")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// GetFunctionAndParameters indicates an expected call of GetFunctionAndParameters
func (mr *MockChaincodeStubInterfaceMockRecorder) GetFunctionAndParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFunctionAndParameters", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetFunctionAndParameters))
}

// GetArgsSlice mocks base method
func (m *MockChaincodeStubInterface) GetArgsSlice() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArgsSlice")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArgsSlice indicates an expected call of GetArgsSlice
func (mr *MockChaincodeStubInterfaceMockRecorder) GetArgsSlice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArgsSlice", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetArgsSlice))
}

// GetTxID mocks base method
func (m *MockChaincodeStubInterface) GetTxID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTxID indicates an expected call of GetTxID
func (mr *MockChaincodeStubInterfaceMockRecorder) GetTxID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxID", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetTxID))
}

// GetChannelID mocks base method
func (m *MockChaincodeStubInterface) GetChannelID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetChannelID indicates an expected call of GetChannelID
func (mr *MockChaincodeStubInterfaceMockRecorder) GetChannelID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelID", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetChannelID))
}

// InvokeChaincode mocks base method
func (m *MockChaincodeStubInterface) InvokeChaincode(chaincodeName string, args [][]byte, channel string) peer.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeChaincode", chaincodeName, args, channel)
	ret0, _ := ret[0].(peer.Response)
	return ret0
}

// InvokeChaincode indicates an expected call of InvokeChaincode
func (mr *MockChaincodeStubInterfaceMockRecorder) InvokeChaincode(chaincodeName, args, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeChaincode", reflect.TypeOf((*MockChaincodeStubInterface)(nil).InvokeChaincode), chaincodeName, args, channel)
}

// GetState mocks base method
func (m *MockChaincodeStubInterface) GetState(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState
func (mr *MockChaincodeStubInterfaceMockRecorder) GetState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetState), key)
}

// GetGlobalState mocks base method
func (m *MockChaincodeStubInterface) GetGlobalState(key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalState", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobalState indicates an expected call of GetGlobalState
func (mr *MockChaincodeStubInterfaceMockRecorder) GetGlobalState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetGlobalState), key)
}

// GetContractState mocks base method
func (m *MockChaincodeStubInterface) GetContractState(contractAddr common.Address, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractState", contractAddr, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractState indicates an expected call of GetContractState
func (mr *MockChaincodeStubInterfaceMockRecorder) GetContractState(contractAddr, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetContractState), contractAddr, key)
}

// GetStateByPrefix mocks base method
func (m *MockChaincodeStubInterface) GetStateByPrefix(prefix string) ([]*modules.KeyValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByPrefix", prefix)
	ret0, _ := ret[0].([]*modules.KeyValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateByPrefix indicates an expected call of GetStateByPrefix
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStateByPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByPrefix", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStateByPrefix), prefix)
}

// PutState mocks base method
func (m *MockChaincodeStubInterface) PutState(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutState", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutState indicates an expected call of PutState
func (mr *MockChaincodeStubInterfaceMockRecorder) PutState(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).PutState), key, value)
}

// PutGlobalState mocks base method
func (m *MockChaincodeStubInterface) PutGlobalState(key string, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGlobalState", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutGlobalState indicates an expected call of PutGlobalState
func (mr *MockChaincodeStubInterfaceMockRecorder) PutGlobalState(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGlobalState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).PutGlobalState), key, value)
}

// OutChainCall mocks base method
func (m *MockChaincodeStubInterface) OutChainCall(outChainName, method string, params []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutChainCall", outChainName, method, params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OutChainCall indicates an expected call of OutChainCall
func (mr *MockChaincodeStubInterfaceMockRecorder) OutChainCall(outChainName, method, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutChainCall", reflect.TypeOf((*MockChaincodeStubInterface)(nil).OutChainCall), outChainName, method, params)
}

// SendJury mocks base method
func (m *MockChaincodeStubInterface) SendJury(msgType uint32, consultContent, myAnswer []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJury", msgType, consultContent, myAnswer)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendJury indicates an expected call of SendJury
func (mr *MockChaincodeStubInterfaceMockRecorder) SendJury(msgType, consultContent, myAnswer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJury", reflect.TypeOf((*MockChaincodeStubInterface)(nil).SendJury), msgType, consultContent, myAnswer)
}

// RecvJury mocks base method
func (m *MockChaincodeStubInterface) RecvJury(msgType uint32, consultContent []byte, timeout uint32) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvJury", msgType, consultContent, timeout)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecvJury indicates an expected call of RecvJury
func (mr *MockChaincodeStubInterfaceMockRecorder) RecvJury(msgType, consultContent, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvJury", reflect.TypeOf((*MockChaincodeStubInterface)(nil).RecvJury), msgType, consultContent, timeout)
}

// DelState mocks base method
func (m *MockChaincodeStubInterface) DelState(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelState", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelState indicates an expected call of DelState
func (mr *MockChaincodeStubInterfaceMockRecorder) DelState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).DelState), key)
}

// DelGlobalState mocks base method
func (m *MockChaincodeStubInterface) DelGlobalState(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelGlobalState", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelGlobalState indicates an expected call of DelGlobalState
func (mr *MockChaincodeStubInterfaceMockRecorder) DelGlobalState(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelGlobalState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).DelGlobalState), key)
}

// GetTxTimestamp mocks base method
func (m *MockChaincodeStubInterface) GetTxTimestamp(rangeNumber uint32) (*timestamp.Timestamp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxTimestamp", rangeNumber)
	ret0, _ := ret[0].(*timestamp.Timestamp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxTimestamp indicates an expected call of GetTxTimestamp
func (mr *MockChaincodeStubInterfaceMockRecorder) GetTxTimestamp(rangeNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxTimestamp", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetTxTimestamp), rangeNumber)
}

// SetEvent mocks base method
func (m *MockChaincodeStubInterface) SetEvent(name string, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEvent", name, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEvent indicates an expected call of SetEvent
func (mr *MockChaincodeStubInterfaceMockRecorder) SetEvent(name, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvent", reflect.TypeOf((*MockChaincodeStubInterface)(nil).SetEvent), name, payload)
}

// GetSystemConfig mocks base method
func (m *MockChaincodeStubInterface) GetSystemConfig() (*modules.GlobalProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemConfig")
	ret0, _ := ret[0].(*modules.GlobalProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemConfig indicates an expected call of GetSystemConfig
func (mr *MockChaincodeStubInterfaceMockRecorder) GetSystemConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemConfig", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetSystemConfig))
}

// GetInvokeAddress mocks base method
func (m *MockChaincodeStubInterface) GetInvokeAddress() (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvokeAddress")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvokeAddress indicates an expected call of GetInvokeAddress
func (mr *MockChaincodeStubInterfaceMockRecorder) GetInvokeAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvokeAddress", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetInvokeAddress))
}

// GetInvokeTokens mocks base method
func (m *MockChaincodeStubInterface) GetInvokeTokens() ([]*modules.InvokeTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvokeTokens")
	ret0, _ := ret[0].([]*modules.InvokeTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvokeTokens indicates an expected call of GetInvokeTokens
func (mr *MockChaincodeStubInterfaceMockRecorder) GetInvokeTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvokeTokens", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetInvokeTokens))
}

// GetContractAllState mocks base method
func (m *MockChaincodeStubInterface) GetContractAllState() (map[string]*modules.ContractStateValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAllState")
	ret0, _ := ret[0].(map[string]*modules.ContractStateValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractAllState indicates an expected call of GetContractAllState
func (mr *MockChaincodeStubInterfaceMockRecorder) GetContractAllState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAllState", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetContractAllState))
}

// GetInvokeFees mocks base method
func (m *MockChaincodeStubInterface) GetInvokeFees() (*modules.AmountAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvokeFees")
	ret0, _ := ret[0].(*modules.AmountAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvokeFees indicates an expected call of GetInvokeFees
func (mr *MockChaincodeStubInterfaceMockRecorder) GetInvokeFees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvokeFees", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetInvokeFees))
}

// GetContractID mocks base method
func (m *MockChaincodeStubInterface) GetContractID() ([]byte, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractID")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetContractID indicates an expected call of GetContractID
func (mr *MockChaincodeStubInterfaceMockRecorder) GetContractID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractID", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetContractID))
}

// GetTokenBalance mocks base method
func (m *MockChaincodeStubInterface) GetTokenBalance(address string, token *modules.Asset) ([]*modules.InvokeTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenBalance", address, token)
	ret0, _ := ret[0].([]*modules.InvokeTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenBalance indicates an expected call of GetTokenBalance
func (mr *MockChaincodeStubInterfaceMockRecorder) GetTokenBalance(address, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenBalance", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetTokenBalance), address, token)
}

// GetStableTransactionByHash mocks base method
func (m *MockChaincodeStubInterface) GetStableTransactionByHash(txHash string) (*modules.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStableTransactionByHash", txHash)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStableTransactionByHash indicates an expected call of GetStableTransactionByHash
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStableTransactionByHash(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStableTransactionByHash", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStableTransactionByHash), txHash)
}

// GetStableUnit mocks base method
func (m *MockChaincodeStubInterface) GetStableUnit(unitHash string, unitNumber uint64) (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStableUnit", unitHash, unitNumber)
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStableUnit indicates an expected call of GetStableUnit
func (mr *MockChaincodeStubInterfaceMockRecorder) GetStableUnit(unitHash, unitNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStableUnit", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetStableUnit), unitHash, unitNumber)
}

// PayOutToken mocks base method
func (m *MockChaincodeStubInterface) PayOutToken(addr string, invokeTokens *modules.AmountAsset, lockTime uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayOutToken", addr, invokeTokens, lockTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayOutToken indicates an expected call of PayOutToken
func (mr *MockChaincodeStubInterfaceMockRecorder) PayOutToken(addr, invokeTokens, lockTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayOutToken", reflect.TypeOf((*MockChaincodeStubInterface)(nil).PayOutToken), addr, invokeTokens, lockTime)
}

// GetInvokeParameters mocks base method
func (m *MockChaincodeStubInterface) GetInvokeParameters() (common.Address, []*modules.InvokeTokens, *modules.AmountAsset, string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvokeParameters")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].([]*modules.InvokeTokens)
	ret2, _ := ret[2].(*modules.AmountAsset)
	ret3, _ := ret[3].(string)
	ret4, _ := ret[4].([]string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetInvokeParameters indicates an expected call of GetInvokeParameters
func (mr *MockChaincodeStubInterfaceMockRecorder) GetInvokeParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvokeParameters", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetInvokeParameters))
}

// DefineToken mocks base method
func (m *MockChaincodeStubInterface) DefineToken(tokenType byte, define []byte, creator string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefineToken", tokenType, define, creator)
	ret0, _ := ret[0].(error)
	return ret0
}

// DefineToken indicates an expected call of DefineToken
func (mr *MockChaincodeStubInterfaceMockRecorder) DefineToken(tokenType, define, creator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineToken", reflect.TypeOf((*MockChaincodeStubInterface)(nil).DefineToken), tokenType, define, creator)
}

// SupplyToken mocks base method
func (m *MockChaincodeStubInterface) SupplyToken(assetId, uniqueId []byte, amt uint64, creator string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupplyToken", assetId, uniqueId, amt, creator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SupplyToken indicates an expected call of SupplyToken
func (mr *MockChaincodeStubInterfaceMockRecorder) SupplyToken(assetId, uniqueId, amt, creator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupplyToken", reflect.TypeOf((*MockChaincodeStubInterface)(nil).SupplyToken), assetId, uniqueId, amt, creator)
}

// GetRequesterCert mocks base method
func (m *MockChaincodeStubInterface) GetRequesterCert() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequesterCert")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequesterCert indicates an expected call of GetRequesterCert
func (mr *MockChaincodeStubInterfaceMockRecorder) GetRequesterCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequesterCert", reflect.TypeOf((*MockChaincodeStubInterface)(nil).GetRequesterCert))
}

// IsRequesterCertValid mocks base method
func (m *MockChaincodeStubInterface) IsRequesterCertValid() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRequesterCertValid")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRequesterCertValid indicates an expected call of IsRequesterCertValid
func (mr *MockChaincodeStubInterfaceMockRecorder) IsRequesterCertValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRequesterCertValid", reflect.TypeOf((*MockChaincodeStubInterface)(nil).IsRequesterCertValid))
}
