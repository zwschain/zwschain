/*
	This file is part of go-palletone.
	go-palletone is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.
	go-palletone is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	You should have received a copy of the GNU General Public License
	along with go-palletone.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * @author PalletOne core developers <dev@pallet.one>
 * @date 2018
 */
 
package algorithm

import (
	"testing"
	"github.com/tinychain/algorand/common"
	"math/rand"
	"time"
	"fmt"
)

func BenchmarkSubUsers(b *testing.B) {
	rand.Seed(time.Now().UnixNano())
	for i := 0; i < b.N; i++ { //
		hash := common.BytesToHash(common.Uint2Bytes(rand.Uint64()))
		num := Selected(26, 1000, 1000,hash.Bytes())
		fmt.Printf("hash[%s], num[%d]", hash.String(), num)
	}
}

func TestBenchmarkSubUsers(t *testing.T) {
	fmt.Println("enter TestBenchmarkSubUsers")
	rand.Seed(time.Now().UnixNano())
	for i := 0; i < 100; i++ { //b.N
		hash := common.BytesToHash(common.Uint2Bytes(rand.Uint64()))
		num := Selected(10, 10, 100,hash.Bytes())
		//t.Logf("hash[%s], num[%d]", hash.String(), num)
		fmt.Printf("hash[%s], num[%d]\n", hash.String(), num)
	}
}

func TestSubUsersSingle(t *testing.T) {
	begin := time.Now().UnixNano()
	Selected(26, 1000, 1000,common.BytesToHash(common.Uint2Bytes(uint64(0))).Bytes())
	fmt.Printf("subusers cost %v\n", time.Now().UnixNano()-begin)
}
