// Code generated by MockGen. DO NOT EDIT.
// Source: ./dag/interface.go

// Package dag is a generated GoMock package.
package dag

import (
	gomock "github.com/golang/mock/gomock"
	common "github.com/palletone/go-palletone/common"
	event "github.com/palletone/go-palletone/common/event"
	discover "github.com/palletone/go-palletone/common/p2p/discover"
	core "github.com/palletone/go-palletone/core"
	modules "github.com/palletone/go-palletone/dag/modules"
	txspool "github.com/palletone/go-palletone/txspool"
	big "math/big"
	reflect "reflect"
	time "time"
)

// MockIDag is a mock of IDag interface
type MockIDag struct {
	ctrl     *gomock.Controller
	recorder *MockIDagMockRecorder
}

// MockIDagMockRecorder is the mock recorder for MockIDag
type MockIDagMockRecorder struct {
	mock *MockIDag
}

// NewMockIDag creates a new mock instance
func NewMockIDag(ctrl *gomock.Controller) *MockIDag {
	mock := &MockIDag{ctrl: ctrl}
	mock.recorder = &MockIDagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDag) EXPECT() *MockIDagMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockIDag) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockIDagMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDag)(nil).Close))
}

// GetCommon mocks base method
func (m *MockIDag) GetCommon(key []byte, stableDb bool) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommon", key, stableDb)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommon indicates an expected call of GetCommon
func (mr *MockIDagMockRecorder) GetCommon(key, stableDb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommon", reflect.TypeOf((*MockIDag)(nil).GetCommon), key, stableDb)
}

// GetCommonByPrefix mocks base method
func (m *MockIDag) GetCommonByPrefix(prefix []byte, stableDb bool) map[string][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommonByPrefix", prefix, stableDb)
	ret0, _ := ret[0].(map[string][]byte)
	return ret0
}

// GetCommonByPrefix indicates an expected call of GetCommonByPrefix
func (mr *MockIDagMockRecorder) GetCommonByPrefix(prefix, stableDb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommonByPrefix", reflect.TypeOf((*MockIDag)(nil).GetCommonByPrefix), prefix, stableDb)
}

// SaveCommon mocks base method
func (m *MockIDag) SaveCommon(key, val []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCommon", key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCommon indicates an expected call of SaveCommon
func (mr *MockIDagMockRecorder) SaveCommon(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCommon", reflect.TypeOf((*MockIDag)(nil).SaveCommon), key, val)
}

// GetAllData mocks base method
func (m *MockIDag) GetAllData() ([][]byte, [][]byte) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllData")
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].([][]byte)
	return ret0, ret1
}

// GetAllData indicates an expected call of GetAllData
func (mr *MockIDagMockRecorder) GetAllData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllData", reflect.TypeOf((*MockIDag)(nil).GetAllData))
}

// MemdagInfos mocks base method
func (m *MockIDag) MemdagInfos() (*modules.MemdagInfos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemdagInfos")
	ret0, _ := ret[0].(*modules.MemdagInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemdagInfos indicates an expected call of MemdagInfos
func (mr *MockIDagMockRecorder) MemdagInfos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemdagInfos", reflect.TypeOf((*MockIDag)(nil).MemdagInfos))
}

// IsEmpty mocks base method
func (m *MockIDag) IsEmpty() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmpty")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEmpty indicates an expected call of IsEmpty
func (mr *MockIDagMockRecorder) IsEmpty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmpty", reflect.TypeOf((*MockIDag)(nil).IsEmpty))
}

// GetStableChainIndex mocks base method
func (m *MockIDag) GetStableChainIndex(token modules.AssetId) *modules.ChainIndex {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStableChainIndex", token)
	ret0, _ := ret[0].(*modules.ChainIndex)
	return ret0
}

// GetStableChainIndex indicates an expected call of GetStableChainIndex
func (mr *MockIDagMockRecorder) GetStableChainIndex(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStableChainIndex", reflect.TypeOf((*MockIDag)(nil).GetStableChainIndex), token)
}

// CurrentUnit mocks base method
func (m *MockIDag) CurrentUnit(token modules.AssetId) *modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUnit", token)
	ret0, _ := ret[0].(*modules.Unit)
	return ret0
}

// CurrentUnit indicates an expected call of CurrentUnit
func (mr *MockIDagMockRecorder) CurrentUnit(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUnit", reflect.TypeOf((*MockIDag)(nil).CurrentUnit), token)
}

// GetCurrentUnit mocks base method
func (m *MockIDag) GetCurrentUnit(assetId modules.AssetId) *modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUnit", assetId)
	ret0, _ := ret[0].(*modules.Unit)
	return ret0
}

// GetCurrentUnit indicates an expected call of GetCurrentUnit
func (mr *MockIDagMockRecorder) GetCurrentUnit(assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUnit", reflect.TypeOf((*MockIDag)(nil).GetCurrentUnit), assetId)
}

// GetMainCurrentUnit mocks base method
func (m *MockIDag) GetMainCurrentUnit() *modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainCurrentUnit")
	ret0, _ := ret[0].(*modules.Unit)
	return ret0
}

// GetMainCurrentUnit indicates an expected call of GetMainCurrentUnit
func (mr *MockIDagMockRecorder) GetMainCurrentUnit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainCurrentUnit", reflect.TypeOf((*MockIDag)(nil).GetMainCurrentUnit))
}

// GetCurrentMemUnit mocks base method
func (m *MockIDag) GetCurrentMemUnit(assetId modules.AssetId) *modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentMemUnit", assetId)
	ret0, _ := ret[0].(*modules.Unit)
	return ret0
}

// GetCurrentMemUnit indicates an expected call of GetCurrentMemUnit
func (mr *MockIDagMockRecorder) GetCurrentMemUnit(assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentMemUnit", reflect.TypeOf((*MockIDag)(nil).GetCurrentMemUnit), assetId)
}

// InsertDag mocks base method
func (m *MockIDag) InsertDag(units modules.Units, txpool txspool.ITxPool, is_stable bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDag", units, txpool, is_stable)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertDag indicates an expected call of InsertDag
func (mr *MockIDagMockRecorder) InsertDag(units, txpool, is_stable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDag", reflect.TypeOf((*MockIDag)(nil).InsertDag), units, txpool, is_stable)
}

// GetUnitByHash mocks base method
func (m *MockIDag) GetUnitByHash(hash common.Hash) (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitByHash", hash)
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitByHash indicates an expected call of GetUnitByHash
func (mr *MockIDagMockRecorder) GetUnitByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitByHash", reflect.TypeOf((*MockIDag)(nil).GetUnitByHash), hash)
}

// HasHeader mocks base method
func (m *MockIDag) HasHeader(arg0 common.Hash, arg1 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasHeader", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasHeader indicates an expected call of HasHeader
func (mr *MockIDagMockRecorder) HasHeader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasHeader", reflect.TypeOf((*MockIDag)(nil).HasHeader), arg0, arg1)
}

// GetHeaderByNumber mocks base method
func (m *MockIDag) GetHeaderByNumber(number *modules.ChainIndex) (*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (mr *MockIDagMockRecorder) GetHeaderByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockIDag)(nil).GetHeaderByNumber), number)
}

// GetHeaderByHash mocks base method
func (m *MockIDag) GetHeaderByHash(arg0 common.Hash) (*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByHash", arg0)
	ret0, _ := ret[0].(*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockIDagMockRecorder) GetHeaderByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockIDag)(nil).GetHeaderByHash), arg0)
}

// GetHeadersByAuthor mocks base method
func (m *MockIDag) GetHeadersByAuthor(authorAddr common.Address, startHeight, count uint64) ([]*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadersByAuthor", authorAddr, startHeight, count)
	ret0, _ := ret[0].([]*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeadersByAuthor indicates an expected call of GetHeadersByAuthor
func (mr *MockIDagMockRecorder) GetHeadersByAuthor(authorAddr, startHeight, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadersByAuthor", reflect.TypeOf((*MockIDag)(nil).GetHeadersByAuthor), authorAddr, startHeight, count)
}

// GetUnstableUnits mocks base method
func (m *MockIDag) GetUnstableUnits() []*modules.Unit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnstableUnits")
	ret0, _ := ret[0].([]*modules.Unit)
	return ret0
}

// GetUnstableUnits indicates an expected call of GetUnstableUnits
func (mr *MockIDagMockRecorder) GetUnstableUnits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnstableUnits", reflect.TypeOf((*MockIDag)(nil).GetUnstableUnits))
}

// CurrentHeader mocks base method
func (m *MockIDag) CurrentHeader(token modules.AssetId) *modules.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeader", token)
	ret0, _ := ret[0].(*modules.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader
func (mr *MockIDagMockRecorder) CurrentHeader(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockIDag)(nil).CurrentHeader), token)
}

// GetUnitTransactions mocks base method
func (m *MockIDag) GetUnitTransactions(hash common.Hash) (modules.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTransactions", hash)
	ret0, _ := ret[0].(modules.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTransactions indicates an expected call of GetUnitTransactions
func (mr *MockIDagMockRecorder) GetUnitTransactions(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTransactions", reflect.TypeOf((*MockIDag)(nil).GetUnitTransactions), hash)
}

// GetUnitTxsHash mocks base method
func (m *MockIDag) GetUnitTxsHash(hash common.Hash) ([]common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTxsHash", hash)
	ret0, _ := ret[0].([]common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTxsHash indicates an expected call of GetUnitTxsHash
func (mr *MockIDagMockRecorder) GetUnitTxsHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTxsHash", reflect.TypeOf((*MockIDag)(nil).GetUnitTxsHash), hash)
}

// GetTransaction mocks base method
func (m *MockIDag) GetTransaction(hash common.Hash) (*modules.TransactionWithUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", hash)
	ret0, _ := ret[0].(*modules.TransactionWithUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction
func (mr *MockIDagMockRecorder) GetTransaction(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockIDag)(nil).GetTransaction), hash)
}

// GetTransactionOnly mocks base method
func (m *MockIDag) GetTransactionOnly(hash common.Hash) (*modules.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionOnly", hash)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionOnly indicates an expected call of GetTransactionOnly
func (mr *MockIDagMockRecorder) GetTransactionOnly(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionOnly", reflect.TypeOf((*MockIDag)(nil).GetTransactionOnly), hash)
}

// GetStableTransactionOnly mocks base method
func (m *MockIDag) GetStableTransactionOnly(hash common.Hash) (*modules.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStableTransactionOnly", hash)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStableTransactionOnly indicates an expected call of GetStableTransactionOnly
func (mr *MockIDagMockRecorder) GetStableTransactionOnly(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStableTransactionOnly", reflect.TypeOf((*MockIDag)(nil).GetStableTransactionOnly), hash)
}

// GetStableUnit mocks base method
func (m *MockIDag) GetStableUnit(hash common.Hash) (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStableUnit", hash)
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStableUnit indicates an expected call of GetStableUnit
func (mr *MockIDagMockRecorder) GetStableUnit(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStableUnit", reflect.TypeOf((*MockIDag)(nil).GetStableUnit), hash)
}

// GetStableUnitByNumber mocks base method
func (m *MockIDag) GetStableUnitByNumber(number *modules.ChainIndex) (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStableUnitByNumber", number)
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStableUnitByNumber indicates an expected call of GetStableUnitByNumber
func (mr *MockIDagMockRecorder) GetStableUnitByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStableUnitByNumber", reflect.TypeOf((*MockIDag)(nil).GetStableUnitByNumber), number)
}

// IsTransactionExist mocks base method
func (m *MockIDag) IsTransactionExist(hash common.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTransactionExist", hash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTransactionExist indicates an expected call of IsTransactionExist
func (mr *MockIDagMockRecorder) IsTransactionExist(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTransactionExist", reflect.TypeOf((*MockIDag)(nil).IsTransactionExist), hash)
}

// GetTxSearchEntry mocks base method
func (m *MockIDag) GetTxSearchEntry(hash common.Hash) (*modules.TxLookupEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxSearchEntry", hash)
	ret0, _ := ret[0].(*modules.TxLookupEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxSearchEntry indicates an expected call of GetTxSearchEntry
func (mr *MockIDagMockRecorder) GetTxSearchEntry(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxSearchEntry", reflect.TypeOf((*MockIDag)(nil).GetTxSearchEntry), hash)
}

// GetTxRequesterAddress mocks base method
func (m *MockIDag) GetTxRequesterAddress(tx *modules.Transaction) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxRequesterAddress", tx)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxRequesterAddress indicates an expected call of GetTxRequesterAddress
func (mr *MockIDagMockRecorder) GetTxRequesterAddress(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxRequesterAddress", reflect.TypeOf((*MockIDag)(nil).GetTxRequesterAddress), tx)
}

// InsertHeaderDag mocks base method
func (m *MockIDag) InsertHeaderDag(arg0 []*modules.Header) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHeaderDag", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertHeaderDag indicates an expected call of InsertHeaderDag
func (mr *MockIDagMockRecorder) InsertHeaderDag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHeaderDag", reflect.TypeOf((*MockIDag)(nil).InsertHeaderDag), arg0)
}

// HasUnit mocks base method
func (m *MockIDag) HasUnit(hash common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUnit", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUnit indicates an expected call of HasUnit
func (mr *MockIDagMockRecorder) HasUnit(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUnit", reflect.TypeOf((*MockIDag)(nil).HasUnit), hash)
}

// ParentsIsConfirmByHash mocks base method
func (m *MockIDag) ParentsIsConfirmByHash(hash common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParentsIsConfirmByHash", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ParentsIsConfirmByHash indicates an expected call of ParentsIsConfirmByHash
func (mr *MockIDagMockRecorder) ParentsIsConfirmByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParentsIsConfirmByHash", reflect.TypeOf((*MockIDag)(nil).ParentsIsConfirmByHash), hash)
}

// IsHeaderExist mocks base method
func (m *MockIDag) IsHeaderExist(hash common.Hash) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHeaderExist", hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHeaderExist indicates an expected call of IsHeaderExist
func (mr *MockIDagMockRecorder) IsHeaderExist(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHeaderExist", reflect.TypeOf((*MockIDag)(nil).IsHeaderExist), hash)
}

// SaveUnit mocks base method
func (m *MockIDag) SaveUnit(unit *modules.Unit, txpool txspool.ITxPool, isGenesis bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUnit", unit, txpool, isGenesis)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUnit indicates an expected call of SaveUnit
func (mr *MockIDagMockRecorder) SaveUnit(unit, txpool, isGenesis interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUnit", reflect.TypeOf((*MockIDag)(nil).SaveUnit), unit, txpool, isGenesis)
}

// FastSyncCommitHead mocks base method
func (m *MockIDag) FastSyncCommitHead(arg0 common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FastSyncCommitHead", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FastSyncCommitHead indicates an expected call of FastSyncCommitHead
func (mr *MockIDagMockRecorder) FastSyncCommitHead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FastSyncCommitHead", reflect.TypeOf((*MockIDag)(nil).FastSyncCommitHead), arg0)
}

// GetGenesisUnit mocks base method
func (m *MockIDag) GetGenesisUnit() (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisUnit")
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenesisUnit indicates an expected call of GetGenesisUnit
func (mr *MockIDagMockRecorder) GetGenesisUnit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisUnit", reflect.TypeOf((*MockIDag)(nil).GetGenesisUnit))
}

// GetContractState mocks base method
func (m *MockIDag) GetContractState(contractid []byte, field string) ([]byte, *modules.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractState", contractid, field)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*modules.StateVersion)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContractState indicates an expected call of GetContractState
func (mr *MockIDagMockRecorder) GetContractState(contractid, field interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractState", reflect.TypeOf((*MockIDag)(nil).GetContractState), contractid, field)
}

// GetContractStateByVersion mocks base method
func (m *MockIDag) GetContractStateByVersion(id []byte, field string, version *modules.StateVersion) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStateByVersion", id, field, version)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStateByVersion indicates an expected call of GetContractStateByVersion
func (mr *MockIDagMockRecorder) GetContractStateByVersion(id, field, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStateByVersion", reflect.TypeOf((*MockIDag)(nil).GetContractStateByVersion), id, field, version)
}

// GetContractStatesById mocks base method
func (m *MockIDag) GetContractStatesById(id []byte) (map[string]*modules.ContractStateValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStatesById", id)
	ret0, _ := ret[0].(map[string]*modules.ContractStateValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStatesById indicates an expected call of GetContractStatesById
func (mr *MockIDagMockRecorder) GetContractStatesById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStatesById", reflect.TypeOf((*MockIDag)(nil).GetContractStatesById), id)
}

// GetContractStatesByPrefix mocks base method
func (m *MockIDag) GetContractStatesByPrefix(id []byte, prefix string) (map[string]*modules.ContractStateValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractStatesByPrefix", id, prefix)
	ret0, _ := ret[0].(map[string]*modules.ContractStateValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractStatesByPrefix indicates an expected call of GetContractStatesByPrefix
func (mr *MockIDagMockRecorder) GetContractStatesByPrefix(id, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractStatesByPrefix", reflect.TypeOf((*MockIDag)(nil).GetContractStatesByPrefix), id, prefix)
}

// GetContractJury mocks base method
func (m *MockIDag) GetContractJury(contractId []byte) (*modules.ElectionNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractJury", contractId)
	ret0, _ := ret[0].(*modules.ElectionNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractJury indicates an expected call of GetContractJury
func (mr *MockIDagMockRecorder) GetContractJury(contractId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractJury", reflect.TypeOf((*MockIDag)(nil).GetContractJury), contractId)
}

// GetUnitNumber mocks base method
func (m *MockIDag) GetUnitNumber(hash common.Hash) (*modules.ChainIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNumber", hash)
	ret0, _ := ret[0].(*modules.ChainIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNumber indicates an expected call of GetUnitNumber
func (mr *MockIDagMockRecorder) GetUnitNumber(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNumber", reflect.TypeOf((*MockIDag)(nil).GetUnitNumber), hash)
}

// GetUtxoView mocks base method
func (m *MockIDag) GetUtxoView(tx *modules.Transaction) (*txspool.UtxoViewpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUtxoView", tx)
	ret0, _ := ret[0].(*txspool.UtxoViewpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUtxoView indicates an expected call of GetUtxoView
func (mr *MockIDagMockRecorder) GetUtxoView(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtxoView", reflect.TypeOf((*MockIDag)(nil).GetUtxoView), tx)
}

// IsUtxoSpent mocks base method
func (m *MockIDag) IsUtxoSpent(outpoint *modules.OutPoint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUtxoSpent", outpoint)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUtxoSpent indicates an expected call of IsUtxoSpent
func (mr *MockIDagMockRecorder) IsUtxoSpent(outpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUtxoSpent", reflect.TypeOf((*MockIDag)(nil).IsUtxoSpent), outpoint)
}

// SubscribeChainHeadEvent mocks base method
func (m *MockIDag) SubscribeChainHeadEvent(ch chan<- modules.ChainHeadEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainHeadEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainHeadEvent indicates an expected call of SubscribeChainHeadEvent
func (mr *MockIDagMockRecorder) SubscribeChainHeadEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainHeadEvent", reflect.TypeOf((*MockIDag)(nil).SubscribeChainHeadEvent), ch)
}

// SubscribeChainEvent mocks base method
func (m *MockIDag) SubscribeChainEvent(ch chan<- modules.ChainEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeChainEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeChainEvent indicates an expected call of SubscribeChainEvent
func (mr *MockIDagMockRecorder) SubscribeChainEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeChainEvent", reflect.TypeOf((*MockIDag)(nil).SubscribeChainEvent), ch)
}

// PostChainEvents mocks base method
func (m *MockIDag) PostChainEvents(events []interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostChainEvents", events)
}

// PostChainEvents indicates an expected call of PostChainEvents
func (mr *MockIDagMockRecorder) PostChainEvents(events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostChainEvents", reflect.TypeOf((*MockIDag)(nil).PostChainEvents), events)
}

// GetTrieSyncProgress mocks base method
func (m *MockIDag) GetTrieSyncProgress() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrieSyncProgress")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrieSyncProgress indicates an expected call of GetTrieSyncProgress
func (mr *MockIDagMockRecorder) GetTrieSyncProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrieSyncProgress", reflect.TypeOf((*MockIDag)(nil).GetTrieSyncProgress))
}

// GetUtxoEntry mocks base method
func (m *MockIDag) GetUtxoEntry(outpoint *modules.OutPoint) (*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUtxoEntry", outpoint)
	ret0, _ := ret[0].(*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUtxoEntry indicates an expected call of GetUtxoEntry
func (mr *MockIDagMockRecorder) GetUtxoEntry(outpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUtxoEntry", reflect.TypeOf((*MockIDag)(nil).GetUtxoEntry), outpoint)
}

// GetStxoEntry mocks base method
func (m *MockIDag) GetStxoEntry(outpoint *modules.OutPoint) (*modules.Stxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStxoEntry", outpoint)
	ret0, _ := ret[0].(*modules.Stxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStxoEntry indicates an expected call of GetStxoEntry
func (mr *MockIDagMockRecorder) GetStxoEntry(outpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStxoEntry", reflect.TypeOf((*MockIDag)(nil).GetStxoEntry), outpoint)
}

// GetTxOutput mocks base method
func (m *MockIDag) GetTxOutput(outpoint *modules.OutPoint) (*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxOutput", outpoint)
	ret0, _ := ret[0].(*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxOutput indicates an expected call of GetTxOutput
func (mr *MockIDagMockRecorder) GetTxOutput(outpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxOutput", reflect.TypeOf((*MockIDag)(nil).GetTxOutput), outpoint)
}

// GetAddrOutpoints mocks base method
func (m *MockIDag) GetAddrOutpoints(addr common.Address) ([]modules.OutPoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrOutpoints", addr)
	ret0, _ := ret[0].([]modules.OutPoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrOutpoints indicates an expected call of GetAddrOutpoints
func (mr *MockIDagMockRecorder) GetAddrOutpoints(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrOutpoints", reflect.TypeOf((*MockIDag)(nil).GetAddrOutpoints), addr)
}

// GetAddrUtxos mocks base method
func (m *MockIDag) GetAddrUtxos(addr common.Address) (map[modules.OutPoint]*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrUtxos", addr)
	ret0, _ := ret[0].(map[modules.OutPoint]*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrUtxos indicates an expected call of GetAddrUtxos
func (mr *MockIDagMockRecorder) GetAddrUtxos(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrUtxos", reflect.TypeOf((*MockIDag)(nil).GetAddrUtxos), addr)
}

// GetAddrStableUtxos mocks base method
func (m *MockIDag) GetAddrStableUtxos(addr common.Address) (map[modules.OutPoint]*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrStableUtxos", addr)
	ret0, _ := ret[0].(map[modules.OutPoint]*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrStableUtxos indicates an expected call of GetAddrStableUtxos
func (mr *MockIDagMockRecorder) GetAddrStableUtxos(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrStableUtxos", reflect.TypeOf((*MockIDag)(nil).GetAddrStableUtxos), addr)
}

// GetAddr1TokenUtxos mocks base method
func (m *MockIDag) GetAddr1TokenUtxos(addr common.Address, asset *modules.Asset) (map[modules.OutPoint]*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddr1TokenUtxos", addr, asset)
	ret0, _ := ret[0].(map[modules.OutPoint]*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddr1TokenUtxos indicates an expected call of GetAddr1TokenUtxos
func (mr *MockIDagMockRecorder) GetAddr1TokenUtxos(addr, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddr1TokenUtxos", reflect.TypeOf((*MockIDag)(nil).GetAddr1TokenUtxos), addr, asset)
}

// GetAllUtxos mocks base method
func (m *MockIDag) GetAllUtxos() (map[modules.OutPoint]*modules.Utxo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUtxos")
	ret0, _ := ret[0].(map[modules.OutPoint]*modules.Utxo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUtxos indicates an expected call of GetAllUtxos
func (mr *MockIDagMockRecorder) GetAllUtxos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUtxos", reflect.TypeOf((*MockIDag)(nil).GetAllUtxos))
}

// GetAddrTransactions mocks base method
func (m *MockIDag) GetAddrTransactions(addr common.Address) ([]*modules.TransactionWithUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrTransactions", addr)
	ret0, _ := ret[0].([]*modules.TransactionWithUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrTransactions indicates an expected call of GetAddrTransactions
func (mr *MockIDagMockRecorder) GetAddrTransactions(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrTransactions", reflect.TypeOf((*MockIDag)(nil).GetAddrTransactions), addr)
}

// GetAssetTxHistory mocks base method
func (m *MockIDag) GetAssetTxHistory(asset *modules.Asset) ([]*modules.TransactionWithUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetTxHistory", asset)
	ret0, _ := ret[0].([]*modules.TransactionWithUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetTxHistory indicates an expected call of GetAssetTxHistory
func (mr *MockIDagMockRecorder) GetAssetTxHistory(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetTxHistory", reflect.TypeOf((*MockIDag)(nil).GetAssetTxHistory), asset)
}

// GetContractTpl mocks base method
func (m *MockIDag) GetContractTpl(tplId []byte) (*modules.ContractTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractTpl", tplId)
	ret0, _ := ret[0].(*modules.ContractTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractTpl indicates an expected call of GetContractTpl
func (mr *MockIDagMockRecorder) GetContractTpl(tplId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractTpl", reflect.TypeOf((*MockIDag)(nil).GetContractTpl), tplId)
}

// GetContractTplCode mocks base method
func (m *MockIDag) GetContractTplCode(tplId []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractTplCode", tplId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractTplCode indicates an expected call of GetContractTplCode
func (mr *MockIDagMockRecorder) GetContractTplCode(tplId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractTplCode", reflect.TypeOf((*MockIDag)(nil).GetContractTplCode), tplId)
}

// GetAllContractTpl mocks base method
func (m *MockIDag) GetAllContractTpl() ([]*modules.ContractTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContractTpl")
	ret0, _ := ret[0].([]*modules.ContractTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContractTpl indicates an expected call of GetAllContractTpl
func (mr *MockIDagMockRecorder) GetAllContractTpl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContractTpl", reflect.TypeOf((*MockIDag)(nil).GetAllContractTpl))
}

// SaveContract mocks base method
func (m *MockIDag) SaveContract(contract *modules.Contract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContract", contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContract indicates an expected call of SaveContract
func (mr *MockIDagMockRecorder) SaveContract(contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContract", reflect.TypeOf((*MockIDag)(nil).SaveContract), contract)
}

// GetContract mocks base method
func (m *MockIDag) GetContract(id []byte) (*modules.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", id)
	ret0, _ := ret[0].(*modules.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract
func (mr *MockIDagMockRecorder) GetContract(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockIDag)(nil).GetContract), id)
}

// GetAllContracts mocks base method
func (m *MockIDag) GetAllContracts() ([]*modules.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllContracts")
	ret0, _ := ret[0].([]*modules.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllContracts indicates an expected call of GetAllContracts
func (mr *MockIDagMockRecorder) GetAllContracts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllContracts", reflect.TypeOf((*MockIDag)(nil).GetAllContracts))
}

// GetContractsByTpl mocks base method
func (m *MockIDag) GetContractsByTpl(tplId []byte) ([]*modules.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsByTpl", tplId)
	ret0, _ := ret[0].([]*modules.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractsByTpl indicates an expected call of GetContractsByTpl
func (mr *MockIDagMockRecorder) GetContractsByTpl(tplId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsByTpl", reflect.TypeOf((*MockIDag)(nil).GetContractsByTpl), tplId)
}

// GetUnitByNumber mocks base method
func (m *MockIDag) GetUnitByNumber(number *modules.ChainIndex) (*modules.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitByNumber", number)
	ret0, _ := ret[0].(*modules.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitByNumber indicates an expected call of GetUnitByNumber
func (mr *MockIDagMockRecorder) GetUnitByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitByNumber", reflect.TypeOf((*MockIDag)(nil).GetUnitByNumber), number)
}

// GetUnitHashesFromHash mocks base method
func (m *MockIDag) GetUnitHashesFromHash(hash common.Hash, max uint64) []common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitHashesFromHash", hash, max)
	ret0, _ := ret[0].([]common.Hash)
	return ret0
}

// GetUnitHashesFromHash indicates an expected call of GetUnitHashesFromHash
func (mr *MockIDagMockRecorder) GetUnitHashesFromHash(hash, max interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitHashesFromHash", reflect.TypeOf((*MockIDag)(nil).GetUnitHashesFromHash), hash, max)
}

// GetUnitHash mocks base method
func (m *MockIDag) GetUnitHash(number *modules.ChainIndex) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitHash", number)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitHash indicates an expected call of GetUnitHash
func (mr *MockIDagMockRecorder) GetUnitHash(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitHash", reflect.TypeOf((*MockIDag)(nil).GetUnitHash), number)
}

// GetActiveMediator mocks base method
func (m *MockIDag) GetActiveMediator(add common.Address) *core.Mediator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMediator", add)
	ret0, _ := ret[0].(*core.Mediator)
	return ret0
}

// GetActiveMediator indicates an expected call of GetActiveMediator
func (mr *MockIDagMockRecorder) GetActiveMediator(add interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMediator", reflect.TypeOf((*MockIDag)(nil).GetActiveMediator), add)
}

// GetActiveMediatorAddr mocks base method
func (m *MockIDag) GetActiveMediatorAddr(index int) common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMediatorAddr", index)
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetActiveMediatorAddr indicates an expected call of GetActiveMediatorAddr
func (mr *MockIDagMockRecorder) GetActiveMediatorAddr(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMediatorAddr", reflect.TypeOf((*MockIDag)(nil).GetActiveMediatorAddr), index)
}

// GetActiveMediatorNodes mocks base method
func (m *MockIDag) GetActiveMediatorNodes() map[string]*discover.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMediatorNodes")
	ret0, _ := ret[0].(map[string]*discover.Node)
	return ret0
}

// GetActiveMediatorNodes indicates an expected call of GetActiveMediatorNodes
func (mr *MockIDagMockRecorder) GetActiveMediatorNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMediatorNodes", reflect.TypeOf((*MockIDag)(nil).GetActiveMediatorNodes))
}

// GetAddrByOutPoint mocks base method
func (m *MockIDag) GetAddrByOutPoint(outPoint *modules.OutPoint) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddrByOutPoint", outPoint)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddrByOutPoint indicates an expected call of GetAddrByOutPoint
func (mr *MockIDagMockRecorder) GetAddrByOutPoint(outPoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddrByOutPoint", reflect.TypeOf((*MockIDag)(nil).GetAddrByOutPoint), outPoint)
}

// GetTxFee mocks base method
func (m *MockIDag) GetTxFee(pay *modules.Transaction) (*modules.AmountAsset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxFee", pay)
	ret0, _ := ret[0].(*modules.AmountAsset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxFee indicates an expected call of GetTxFee
func (mr *MockIDagMockRecorder) GetTxFee(pay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxFee", reflect.TypeOf((*MockIDag)(nil).GetTxFee), pay)
}

// SetUnitGroupSign mocks base method
func (m *MockIDag) SetUnitGroupSign(unitHash common.Hash, groupSign []byte, txpool txspool.ITxPool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitGroupSign", unitHash, groupSign, txpool)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitGroupSign indicates an expected call of SetUnitGroupSign
func (mr *MockIDagMockRecorder) SetUnitGroupSign(unitHash, groupSign, txpool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitGroupSign", reflect.TypeOf((*MockIDag)(nil).SetUnitGroupSign), unitHash, groupSign, txpool)
}

// SubscribeToGroupSignEvent mocks base method
func (m *MockIDag) SubscribeToGroupSignEvent(ch chan<- modules.ToGroupSignEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToGroupSignEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeToGroupSignEvent indicates an expected call of SubscribeToGroupSignEvent
func (mr *MockIDagMockRecorder) SubscribeToGroupSignEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToGroupSignEvent", reflect.TypeOf((*MockIDag)(nil).SubscribeToGroupSignEvent), ch)
}

// IsSynced mocks base method
func (m *MockIDag) IsSynced(toStrictly bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSynced", toStrictly)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSynced indicates an expected call of IsSynced
func (mr *MockIDagMockRecorder) IsSynced(toStrictly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSynced", reflect.TypeOf((*MockIDag)(nil).IsSynced), toStrictly)
}

// SubscribeActiveMediatorsUpdatedEvent mocks base method
func (m *MockIDag) SubscribeActiveMediatorsUpdatedEvent(ch chan<- modules.ActiveMediatorsUpdatedEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeActiveMediatorsUpdatedEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeActiveMediatorsUpdatedEvent indicates an expected call of SubscribeActiveMediatorsUpdatedEvent
func (mr *MockIDagMockRecorder) SubscribeActiveMediatorsUpdatedEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeActiveMediatorsUpdatedEvent", reflect.TypeOf((*MockIDag)(nil).SubscribeActiveMediatorsUpdatedEvent), ch)
}

// GetPrecedingMediatorNodes mocks base method
func (m *MockIDag) GetPrecedingMediatorNodes() map[string]*discover.Node {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrecedingMediatorNodes")
	ret0, _ := ret[0].(map[string]*discover.Node)
	return ret0
}

// GetPrecedingMediatorNodes indicates an expected call of GetPrecedingMediatorNodes
func (mr *MockIDagMockRecorder) GetPrecedingMediatorNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrecedingMediatorNodes", reflect.TypeOf((*MockIDag)(nil).GetPrecedingMediatorNodes))
}

// UnitIrreversibleTime mocks base method
func (m *MockIDag) UnitIrreversibleTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitIrreversibleTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// UnitIrreversibleTime indicates an expected call of UnitIrreversibleTime
func (mr *MockIDagMockRecorder) UnitIrreversibleTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitIrreversibleTime", reflect.TypeOf((*MockIDag)(nil).UnitIrreversibleTime))
}

// GenTransferPtnTx mocks base method
func (m *MockIDag) GenTransferPtnTx(from, to common.Address, daoAmount uint64, text *string, txPool txspool.ITxPool) (*modules.Transaction, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenTransferPtnTx", from, to, daoAmount, text, txPool)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenTransferPtnTx indicates an expected call of GenTransferPtnTx
func (mr *MockIDagMockRecorder) GenTransferPtnTx(from, to, daoAmount, text, txPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenTransferPtnTx", reflect.TypeOf((*MockIDag)(nil).GenTransferPtnTx), from, to, daoAmount, text, txPool)
}

// QueryDbByKey mocks base method
func (m *MockIDag) QueryDbByKey(key []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDbByKey", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDbByKey indicates an expected call of QueryDbByKey
func (mr *MockIDagMockRecorder) QueryDbByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDbByKey", reflect.TypeOf((*MockIDag)(nil).QueryDbByKey), key)
}

// QueryDbByPrefix mocks base method
func (m *MockIDag) QueryDbByPrefix(prefix []byte) ([]*modules.DbRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryDbByPrefix", prefix)
	ret0, _ := ret[0].([]*modules.DbRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryDbByPrefix indicates an expected call of QueryDbByPrefix
func (mr *MockIDagMockRecorder) QueryDbByPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryDbByPrefix", reflect.TypeOf((*MockIDag)(nil).QueryDbByPrefix), prefix)
}

// GetTxHashByReqId mocks base method
func (m *MockIDag) GetTxHashByReqId(reqid common.Hash) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxHashByReqId", reqid)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxHashByReqId indicates an expected call of GetTxHashByReqId
func (mr *MockIDagMockRecorder) GetTxHashByReqId(reqid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxHashByReqId", reflect.TypeOf((*MockIDag)(nil).GetTxHashByReqId), reqid)
}

// GetTxByReqId mocks base method
func (m *MockIDag) GetTxByReqId(reqid common.Hash) (*modules.TransactionWithUnitInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxByReqId", reqid)
	ret0, _ := ret[0].(*modules.TransactionWithUnitInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxByReqId indicates an expected call of GetTxByReqId
func (mr *MockIDagMockRecorder) GetTxByReqId(reqid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxByReqId", reflect.TypeOf((*MockIDag)(nil).GetTxByReqId), reqid)
}

// GetTxFromAddress mocks base method
func (m *MockIDag) GetTxFromAddress(tx *modules.Transaction) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxFromAddress", tx)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxFromAddress indicates an expected call of GetTxFromAddress
func (mr *MockIDagMockRecorder) GetTxFromAddress(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxFromAddress", reflect.TypeOf((*MockIDag)(nil).GetTxFromAddress), tx)
}

// GetFileInfo mocks base method
func (m *MockIDag) GetFileInfo(filehash []byte) ([]*modules.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileInfo", filehash)
	ret0, _ := ret[0].([]*modules.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileInfo indicates an expected call of GetFileInfo
func (mr *MockIDagMockRecorder) GetFileInfo(filehash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileInfo", reflect.TypeOf((*MockIDag)(nil).GetFileInfo), filehash)
}

// GetLightHeaderByHash mocks base method
func (m *MockIDag) GetLightHeaderByHash(headerHash common.Hash) (*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLightHeaderByHash", headerHash)
	ret0, _ := ret[0].(*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLightHeaderByHash indicates an expected call of GetLightHeaderByHash
func (mr *MockIDagMockRecorder) GetLightHeaderByHash(headerHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLightHeaderByHash", reflect.TypeOf((*MockIDag)(nil).GetLightHeaderByHash), headerHash)
}

// GetLightChainHeight mocks base method
func (m *MockIDag) GetLightChainHeight(assetId modules.AssetId) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLightChainHeight", assetId)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLightChainHeight indicates an expected call of GetLightChainHeight
func (mr *MockIDagMockRecorder) GetLightChainHeight(assetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLightChainHeight", reflect.TypeOf((*MockIDag)(nil).GetLightChainHeight), assetId)
}

// InsertLightHeader mocks base method
func (m *MockIDag) InsertLightHeader(headers []*modules.Header) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLightHeader", headers)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLightHeader indicates an expected call of InsertLightHeader
func (mr *MockIDagMockRecorder) InsertLightHeader(headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLightHeader", reflect.TypeOf((*MockIDag)(nil).InsertLightHeader), headers)
}

// GetAllLeafNodes mocks base method
func (m *MockIDag) GetAllLeafNodes() ([]*modules.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLeafNodes")
	ret0, _ := ret[0].([]*modules.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLeafNodes indicates an expected call of GetAllLeafNodes
func (mr *MockIDagMockRecorder) GetAllLeafNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLeafNodes", reflect.TypeOf((*MockIDag)(nil).GetAllLeafNodes))
}

// ClearUtxo mocks base method
func (m *MockIDag) ClearUtxo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearUtxo")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearUtxo indicates an expected call of ClearUtxo
func (mr *MockIDagMockRecorder) ClearUtxo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearUtxo", reflect.TypeOf((*MockIDag)(nil).ClearUtxo))
}

// ClearAddrUtxo mocks base method
func (m *MockIDag) ClearAddrUtxo(addr common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAddrUtxo", addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearAddrUtxo indicates an expected call of ClearAddrUtxo
func (mr *MockIDagMockRecorder) ClearAddrUtxo(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAddrUtxo", reflect.TypeOf((*MockIDag)(nil).ClearAddrUtxo), addr)
}

// SaveUtxoView mocks base method
func (m *MockIDag) SaveUtxoView(view map[modules.OutPoint]*modules.Utxo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUtxoView", view)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUtxoView indicates an expected call of SaveUtxoView
func (mr *MockIDagMockRecorder) SaveUtxoView(view interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUtxoView", reflect.TypeOf((*MockIDag)(nil).SaveUtxoView), view)
}

// HeadUnitTime mocks base method
func (m *MockIDag) HeadUnitTime() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadUnitTime")
	ret0, _ := ret[0].(int64)
	return ret0
}

// HeadUnitTime indicates an expected call of HeadUnitTime
func (mr *MockIDagMockRecorder) HeadUnitTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadUnitTime", reflect.TypeOf((*MockIDag)(nil).HeadUnitTime))
}

// HeadUnitNum mocks base method
func (m *MockIDag) HeadUnitNum() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadUnitNum")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// HeadUnitNum indicates an expected call of HeadUnitNum
func (mr *MockIDagMockRecorder) HeadUnitNum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadUnitNum", reflect.TypeOf((*MockIDag)(nil).HeadUnitNum))
}

// HeadUnitHash mocks base method
func (m *MockIDag) HeadUnitHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HeadUnitHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// HeadUnitHash indicates an expected call of HeadUnitHash
func (mr *MockIDagMockRecorder) HeadUnitHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HeadUnitHash", reflect.TypeOf((*MockIDag)(nil).HeadUnitHash))
}

// GetIrreversibleUnitNum mocks base method
func (m *MockIDag) GetIrreversibleUnitNum(id modules.AssetId) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIrreversibleUnitNum", id)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetIrreversibleUnitNum indicates an expected call of GetIrreversibleUnitNum
func (mr *MockIDagMockRecorder) GetIrreversibleUnitNum(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIrreversibleUnitNum", reflect.TypeOf((*MockIDag)(nil).GetIrreversibleUnitNum), id)
}

// StableHeadUnitProperty mocks base method
func (m *MockIDag) StableHeadUnitProperty(asset modules.AssetId) (*modules.UnitProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StableHeadUnitProperty", asset)
	ret0, _ := ret[0].(*modules.UnitProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StableHeadUnitProperty indicates an expected call of StableHeadUnitProperty
func (mr *MockIDagMockRecorder) StableHeadUnitProperty(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StableHeadUnitProperty", reflect.TypeOf((*MockIDag)(nil).StableHeadUnitProperty), asset)
}

// UnstableHeadUnitProperty mocks base method
func (m *MockIDag) UnstableHeadUnitProperty(asset modules.AssetId) (*modules.UnitProperty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnstableHeadUnitProperty", asset)
	ret0, _ := ret[0].(*modules.UnitProperty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnstableHeadUnitProperty indicates an expected call of UnstableHeadUnitProperty
func (mr *MockIDagMockRecorder) UnstableHeadUnitProperty(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnstableHeadUnitProperty", reflect.TypeOf((*MockIDag)(nil).UnstableHeadUnitProperty), asset)
}

// GetPartitionChains mocks base method
func (m *MockIDag) GetPartitionChains() ([]*modules.PartitionChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitionChains")
	ret0, _ := ret[0].([]*modules.PartitionChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitionChains indicates an expected call of GetPartitionChains
func (mr *MockIDagMockRecorder) GetPartitionChains() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitionChains", reflect.TypeOf((*MockIDag)(nil).GetPartitionChains))
}

// GetMainChain mocks base method
func (m *MockIDag) GetMainChain() (*modules.MainChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainChain")
	ret0, _ := ret[0].(*modules.MainChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainChain indicates an expected call of GetMainChain
func (mr *MockIDagMockRecorder) GetMainChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainChain", reflect.TypeOf((*MockIDag)(nil).GetMainChain))
}

// RefreshAddrTxIndex mocks base method
func (m *MockIDag) RefreshAddrTxIndex() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAddrTxIndex")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshAddrTxIndex indicates an expected call of RefreshAddrTxIndex
func (mr *MockIDagMockRecorder) RefreshAddrTxIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAddrTxIndex", reflect.TypeOf((*MockIDag)(nil).RefreshAddrTxIndex))
}

// GenVoteMediatorTx mocks base method
func (m *MockIDag) GenVoteMediatorTx(voter common.Address, mediators map[string]bool, txPool txspool.ITxPool) (*modules.Transaction, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenVoteMediatorTx", voter, mediators, txPool)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenVoteMediatorTx indicates an expected call of GenVoteMediatorTx
func (mr *MockIDagMockRecorder) GenVoteMediatorTx(voter, mediators, txPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenVoteMediatorTx", reflect.TypeOf((*MockIDag)(nil).GenVoteMediatorTx), voter, mediators, txPool)
}

// GetDynGlobalProp mocks base method
func (m *MockIDag) GetDynGlobalProp() *modules.DynamicGlobalProperty {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDynGlobalProp")
	ret0, _ := ret[0].(*modules.DynamicGlobalProperty)
	return ret0
}

// GetDynGlobalProp indicates an expected call of GetDynGlobalProp
func (mr *MockIDagMockRecorder) GetDynGlobalProp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDynGlobalProp", reflect.TypeOf((*MockIDag)(nil).GetDynGlobalProp))
}

// GetGlobalProp mocks base method
func (m *MockIDag) GetGlobalProp() *modules.GlobalProperty {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalProp")
	ret0, _ := ret[0].(*modules.GlobalProperty)
	return ret0
}

// GetGlobalProp indicates an expected call of GetGlobalProp
func (mr *MockIDagMockRecorder) GetGlobalProp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalProp", reflect.TypeOf((*MockIDag)(nil).GetGlobalProp))
}

// GetMediatorSchl mocks base method
func (m *MockIDag) GetMediatorSchl() *modules.MediatorSchedule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediatorSchl")
	ret0, _ := ret[0].(*modules.MediatorSchedule)
	return ret0
}

// GetMediatorSchl indicates an expected call of GetMediatorSchl
func (mr *MockIDagMockRecorder) GetMediatorSchl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediatorSchl", reflect.TypeOf((*MockIDag)(nil).GetMediatorSchl))
}

// GetMediatorCount mocks base method
func (m *MockIDag) GetMediatorCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediatorCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMediatorCount indicates an expected call of GetMediatorCount
func (mr *MockIDagMockRecorder) GetMediatorCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediatorCount", reflect.TypeOf((*MockIDag)(nil).GetMediatorCount))
}

// IsMediator mocks base method
func (m *MockIDag) IsMediator(address common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMediator", address)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMediator indicates an expected call of IsMediator
func (mr *MockIDagMockRecorder) IsMediator(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMediator", reflect.TypeOf((*MockIDag)(nil).IsMediator), address)
}

// GetMediators mocks base method
func (m *MockIDag) GetMediators() map[common.Address]bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediators")
	ret0, _ := ret[0].(map[common.Address]bool)
	return ret0
}

// GetMediators indicates an expected call of GetMediators
func (mr *MockIDagMockRecorder) GetMediators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediators", reflect.TypeOf((*MockIDag)(nil).GetMediators))
}

// GetActiveMediators mocks base method
func (m *MockIDag) GetActiveMediators() []common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveMediators")
	ret0, _ := ret[0].([]common.Address)
	return ret0
}

// GetActiveMediators indicates an expected call of GetActiveMediators
func (mr *MockIDagMockRecorder) GetActiveMediators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveMediators", reflect.TypeOf((*MockIDag)(nil).GetActiveMediators))
}

// GetAccountVotedMediators mocks base method
func (m *MockIDag) GetAccountVotedMediators(addr common.Address) map[string]bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountVotedMediators", addr)
	ret0, _ := ret[0].(map[string]bool)
	return ret0
}

// GetAccountVotedMediators indicates an expected call of GetAccountVotedMediators
func (mr *MockIDagMockRecorder) GetAccountVotedMediators(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountVotedMediators", reflect.TypeOf((*MockIDag)(nil).GetAccountVotedMediators), addr)
}

// GetMediatorInfo mocks base method
func (m *MockIDag) GetMediatorInfo(address common.Address) *modules.MediatorInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediatorInfo", address)
	ret0, _ := ret[0].(*modules.MediatorInfo)
	return ret0
}

// GetMediatorInfo indicates an expected call of GetMediatorInfo
func (mr *MockIDagMockRecorder) GetMediatorInfo(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediatorInfo", reflect.TypeOf((*MockIDag)(nil).GetMediatorInfo), address)
}

// GetVotingForMediator mocks base method
func (m *MockIDag) GetVotingForMediator(addStr string) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVotingForMediator", addStr)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotingForMediator indicates an expected call of GetVotingForMediator
func (mr *MockIDagMockRecorder) GetVotingForMediator(addStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotingForMediator", reflect.TypeOf((*MockIDag)(nil).GetVotingForMediator), addStr)
}

// MediatorVotedResults mocks base method
func (m *MockIDag) MediatorVotedResults() (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MediatorVotedResults")
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MediatorVotedResults indicates an expected call of MediatorVotedResults
func (mr *MockIDagMockRecorder) MediatorVotedResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MediatorVotedResults", reflect.TypeOf((*MockIDag)(nil).MediatorVotedResults))
}

// LookupMediatorInfo mocks base method
func (m *MockIDag) LookupMediatorInfo() []*modules.MediatorInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupMediatorInfo")
	ret0, _ := ret[0].([]*modules.MediatorInfo)
	return ret0
}

// LookupMediatorInfo indicates an expected call of LookupMediatorInfo
func (mr *MockIDagMockRecorder) LookupMediatorInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupMediatorInfo", reflect.TypeOf((*MockIDag)(nil).LookupMediatorInfo))
}

// IsActiveMediator mocks base method
func (m *MockIDag) IsActiveMediator(add common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActiveMediator", add)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActiveMediator indicates an expected call of IsActiveMediator
func (mr *MockIDagMockRecorder) IsActiveMediator(add interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveMediator", reflect.TypeOf((*MockIDag)(nil).IsActiveMediator), add)
}

// GetMediator mocks base method
func (m *MockIDag) GetMediator(add common.Address) *core.Mediator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediator", add)
	ret0, _ := ret[0].(*core.Mediator)
	return ret0
}

// GetMediator indicates an expected call of GetMediator
func (mr *MockIDagMockRecorder) GetMediator(add interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediator", reflect.TypeOf((*MockIDag)(nil).GetMediator), add)
}

// GetNewestUnitTimestamp mocks base method
func (m *MockIDag) GetNewestUnitTimestamp(token modules.AssetId) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewestUnitTimestamp", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewestUnitTimestamp indicates an expected call of GetNewestUnitTimestamp
func (mr *MockIDagMockRecorder) GetNewestUnitTimestamp(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewestUnitTimestamp", reflect.TypeOf((*MockIDag)(nil).GetNewestUnitTimestamp), token)
}

// GetScheduledMediator mocks base method
func (m *MockIDag) GetScheduledMediator(slotNum uint32) common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduledMediator", slotNum)
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetScheduledMediator indicates an expected call of GetScheduledMediator
func (mr *MockIDagMockRecorder) GetScheduledMediator(slotNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledMediator", reflect.TypeOf((*MockIDag)(nil).GetScheduledMediator), slotNum)
}

// GetSlotAtTime mocks base method
func (m *MockIDag) GetSlotAtTime(when time.Time) uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotAtTime", when)
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetSlotAtTime indicates an expected call of GetSlotAtTime
func (mr *MockIDagMockRecorder) GetSlotAtTime(when interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotAtTime", reflect.TypeOf((*MockIDag)(nil).GetSlotAtTime), when)
}

// GetChainParameters mocks base method
func (m *MockIDag) GetChainParameters() *core.ChainParameters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainParameters")
	ret0, _ := ret[0].(*core.ChainParameters)
	return ret0
}

// GetChainParameters indicates an expected call of GetChainParameters
func (mr *MockIDagMockRecorder) GetChainParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainParameters", reflect.TypeOf((*MockIDag)(nil).GetChainParameters))
}

// GetImmutableChainParameters mocks base method
func (m *MockIDag) GetImmutableChainParameters() *core.ImmutableChainParameters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImmutableChainParameters")
	ret0, _ := ret[0].(*core.ImmutableChainParameters)
	return ret0
}

// GetImmutableChainParameters indicates an expected call of GetImmutableChainParameters
func (mr *MockIDagMockRecorder) GetImmutableChainParameters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImmutableChainParameters", reflect.TypeOf((*MockIDag)(nil).GetImmutableChainParameters))
}

// GetDataVersion mocks base method
func (m *MockIDag) GetDataVersion() (*modules.DataVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataVersion")
	ret0, _ := ret[0].(*modules.DataVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataVersion indicates an expected call of GetDataVersion
func (mr *MockIDagMockRecorder) GetDataVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataVersion", reflect.TypeOf((*MockIDag)(nil).GetDataVersion))
}

// StoreDataVersion mocks base method
func (m *MockIDag) StoreDataVersion(dv *modules.DataVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreDataVersion", dv)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreDataVersion indicates an expected call of StoreDataVersion
func (mr *MockIDagMockRecorder) StoreDataVersion(dv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreDataVersion", reflect.TypeOf((*MockIDag)(nil).StoreDataVersion), dv)
}

// QueryProofOfExistenceByReference mocks base method
func (m *MockIDag) QueryProofOfExistenceByReference(ref []byte) ([]*modules.ProofOfExistence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryProofOfExistenceByReference", ref)
	ret0, _ := ret[0].([]*modules.ProofOfExistence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryProofOfExistenceByReference indicates an expected call of QueryProofOfExistenceByReference
func (mr *MockIDagMockRecorder) QueryProofOfExistenceByReference(ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryProofOfExistenceByReference", reflect.TypeOf((*MockIDag)(nil).QueryProofOfExistenceByReference), ref)
}

// GetAssetReference mocks base method
func (m *MockIDag) GetAssetReference(asset []byte) ([]*modules.ProofOfExistence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetReference", asset)
	ret0, _ := ret[0].([]*modules.ProofOfExistence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetReference indicates an expected call of GetAssetReference
func (mr *MockIDagMockRecorder) GetAssetReference(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetReference", reflect.TypeOf((*MockIDag)(nil).GetAssetReference), asset)
}

// CheckReadSetValid mocks base method
func (m *MockIDag) CheckReadSetValid(contractId []byte, readSet []modules.ContractReadSet) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReadSetValid", contractId, readSet)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckReadSetValid indicates an expected call of CheckReadSetValid
func (mr *MockIDagMockRecorder) CheckReadSetValid(contractId, readSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReadSetValid", reflect.TypeOf((*MockIDag)(nil).CheckReadSetValid), contractId, readSet)
}

// IsActiveJury mocks base method
func (m *MockIDag) IsActiveJury(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActiveJury", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActiveJury indicates an expected call of IsActiveJury
func (mr *MockIDagMockRecorder) IsActiveJury(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActiveJury", reflect.TypeOf((*MockIDag)(nil).IsActiveJury), addr)
}

// JuryCount mocks base method
func (m *MockIDag) JuryCount() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JuryCount")
	ret0, _ := ret[0].(uint)
	return ret0
}

// JuryCount indicates an expected call of JuryCount
func (mr *MockIDagMockRecorder) JuryCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JuryCount", reflect.TypeOf((*MockIDag)(nil).JuryCount))
}

// GetContractDevelopers mocks base method
func (m *MockIDag) GetContractDevelopers() ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractDevelopers")
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractDevelopers indicates an expected call of GetContractDevelopers
func (mr *MockIDagMockRecorder) GetContractDevelopers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractDevelopers", reflect.TypeOf((*MockIDag)(nil).GetContractDevelopers))
}

// IsContractDeveloper mocks base method
func (m *MockIDag) IsContractDeveloper(addr common.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsContractDeveloper", addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsContractDeveloper indicates an expected call of IsContractDeveloper
func (mr *MockIDagMockRecorder) IsContractDeveloper(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsContractDeveloper", reflect.TypeOf((*MockIDag)(nil).IsContractDeveloper), addr)
}

// CreateGenericTransaction mocks base method
func (m *MockIDag) CreateGenericTransaction(from, to common.Address, daoAmount, daoFee uint64, certID *big.Int, msg *modules.Message, txPool txspool.ITxPool) (*modules.Transaction, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenericTransaction", from, to, daoAmount, daoFee, certID, msg, txPool)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGenericTransaction indicates an expected call of CreateGenericTransaction
func (mr *MockIDagMockRecorder) CreateGenericTransaction(from, to, daoAmount, daoFee, certID, msg, txPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenericTransaction", reflect.TypeOf((*MockIDag)(nil).CreateGenericTransaction), from, to, daoAmount, daoFee, certID, msg, txPool)
}

// CreateTokenTransaction mocks base method
func (m *MockIDag) CreateTokenTransaction(from, to common.Address, token *modules.Asset, daoAmountToken, daoFee uint64, msg *modules.Message, txPool txspool.ITxPool) (*modules.Transaction, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTokenTransaction", from, to, token, daoAmountToken, daoFee, msg, txPool)
	ret0, _ := ret[0].(*modules.Transaction)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTokenTransaction indicates an expected call of CreateTokenTransaction
func (mr *MockIDagMockRecorder) CreateTokenTransaction(from, to, token, daoAmountToken, daoFee, msg, txPool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTokenTransaction", reflect.TypeOf((*MockIDag)(nil).CreateTokenTransaction), from, to, token, daoAmountToken, daoFee, msg, txPool)
}

// ChainThreshold mocks base method
func (m *MockIDag) ChainThreshold() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainThreshold")
	ret0, _ := ret[0].(int)
	return ret0
}

// ChainThreshold indicates an expected call of ChainThreshold
func (mr *MockIDagMockRecorder) ChainThreshold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainThreshold", reflect.TypeOf((*MockIDag)(nil).ChainThreshold))
}

// CheckHeaderCorrect mocks base method
func (m *MockIDag) CheckHeaderCorrect(number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHeaderCorrect", number)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHeaderCorrect indicates an expected call of CheckHeaderCorrect
func (mr *MockIDagMockRecorder) CheckHeaderCorrect(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHeaderCorrect", reflect.TypeOf((*MockIDag)(nil).CheckHeaderCorrect), number)
}

// CheckUnitsCorrect mocks base method
func (m *MockIDag) CheckUnitsCorrect(assetId string, number int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUnitsCorrect", assetId, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUnitsCorrect indicates an expected call of CheckUnitsCorrect
func (mr *MockIDagMockRecorder) CheckUnitsCorrect(assetId, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUnitsCorrect", reflect.TypeOf((*MockIDag)(nil).CheckUnitsCorrect), assetId, number)
}

// GetBlacklistAddress mocks base method
func (m *MockIDag) GetBlacklistAddress() ([]common.Address, *modules.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlacklistAddress")
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(*modules.StateVersion)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlacklistAddress indicates an expected call of GetBlacklistAddress
func (mr *MockIDagMockRecorder) GetBlacklistAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlacklistAddress", reflect.TypeOf((*MockIDag)(nil).GetBlacklistAddress))
}

// RebuildAddrTxIndex mocks base method
func (m *MockIDag) RebuildAddrTxIndex() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildAddrTxIndex")
	ret0, _ := ret[0].(error)
	return ret0
}

// RebuildAddrTxIndex indicates an expected call of RebuildAddrTxIndex
func (mr *MockIDagMockRecorder) RebuildAddrTxIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildAddrTxIndex", reflect.TypeOf((*MockIDag)(nil).RebuildAddrTxIndex))
}

// GetJurorByAddrHash mocks base method
func (m *MockIDag) GetJurorByAddrHash(hash common.Hash) (*modules.JurorDeposit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJurorByAddrHash", hash)
	ret0, _ := ret[0].(*modules.JurorDeposit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJurorByAddrHash indicates an expected call of GetJurorByAddrHash
func (mr *MockIDagMockRecorder) GetJurorByAddrHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJurorByAddrHash", reflect.TypeOf((*MockIDag)(nil).GetJurorByAddrHash), hash)
}

// GetJurorReward mocks base method
func (m *MockIDag) GetJurorReward(jurorAdd common.Address) common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJurorReward", jurorAdd)
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetJurorReward indicates an expected call of GetJurorReward
func (mr *MockIDagMockRecorder) GetJurorReward(jurorAdd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJurorReward", reflect.TypeOf((*MockIDag)(nil).GetJurorReward), jurorAdd)
}

// SubscribeUnstableRepositoryUpdatedEvent mocks base method
func (m *MockIDag) SubscribeUnstableRepositoryUpdatedEvent(ch chan<- modules.UnstableRepositoryUpdatedEvent) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeUnstableRepositoryUpdatedEvent", ch)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeUnstableRepositoryUpdatedEvent indicates an expected call of SubscribeUnstableRepositoryUpdatedEvent
func (mr *MockIDagMockRecorder) SubscribeUnstableRepositoryUpdatedEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeUnstableRepositoryUpdatedEvent", reflect.TypeOf((*MockIDag)(nil).SubscribeUnstableRepositoryUpdatedEvent), ch)
}

// GetContractsWithJuryAddr mocks base method
func (m *MockIDag) GetContractsWithJuryAddr(addr common.Hash) []*modules.Contract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractsWithJuryAddr", addr)
	ret0, _ := ret[0].([]*modules.Contract)
	return ret0
}

// GetContractsWithJuryAddr indicates an expected call of GetContractsWithJuryAddr
func (mr *MockIDagMockRecorder) GetContractsWithJuryAddr(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractsWithJuryAddr", reflect.TypeOf((*MockIDag)(nil).GetContractsWithJuryAddr), addr)
}
